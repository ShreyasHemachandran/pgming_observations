*************************************************************************************************
*					Integrity Kernel					*
*************************************************************************************************

- Integrity is Secure, High reliability sytems intended to use in mission critical embedded systems.

- It Guarantees the following,
	- Resource Integrity
	- Confidentialty 
	- Resource
	- Real-Time Response

- Functionality of Integrity Kernel
	- Memory Protection with fine grained MMU Management
	- Capabity Management
	- Generic I/O Layer for mediating access to H/W
	- Scheduling, with processor affinity and optional binding for SMPs
	- Time-partitioning with the Enhanced Partition Scheduler
	- Interprocess communication and synchronization
	- Timer alarms

- Kernel Objects in Integrity:
	- Address Space (Check)
		-(Did not Understand, More about virtual and Physical memory mapping)

	- Memory Region (Check)
		- It is simply a continious space of address in the address space.
		Memory regions in defferent addresses cannot over lap.
		Memory regions can be Readable, writeable and/or Executable.
		Memory regions can be both Physical and Virtual Memory.
	
	///// Tasks and Semaphore can be ignored, for now since POSIX standards are implemented in INTEGRITY ///////
	- Task
		- Task is nothing but Threads in Linux. Each task has its own Address Space.
		Task can reside in kernel Address Space, called as Kernel Task.
		Task can reside in Virtual Address Space, called as Virtual Tasks. (Check)
		There can be multiple tasks in the same Address Space, with each tasks having its own 
		stack, but common code, Data and Heap Segments.
		Difference b/w pThread and Tasks;
			pThread				Tasks
		- pthread_create()		- CommonCreateThread() + RunTask()
	- Semaphore
	///////////////////////////////////////////////////////////////////////////////////////////////////////////

	- Clock
	- Connection
	- Activity
	- IODevice
	- Link
