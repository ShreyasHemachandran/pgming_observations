Commands:
=========

1) ls: 
    Options:
    --------
    ls -a
    ls -l

2) file:
    Options:
    file *

3) cp:
    cp <src path> <dest path>

4) mv:
    mv <src path> <dest path>

5) tail:
    tail +10 <file name>  --> To output the last 10 lines of the file

6) head:
    head +10 <file Name>   --> To output the first 10 lines of the file

7) Linking file: ln Command
    1) ln <ActualFile> <LinkFileName> ---> To create a Hard Link
    Note: We cannot create a Hard Link for a Directory

    2) ln -s <ActualFile> <SymbolicFileName> ---> To Crete a symbolic link

8)  find . -name "*vpu*.c"
    Finds the specific pattern file in the Current Directory (.)

9) cscope
    install "cscope" to do the same as ctags, its a differnt tool.
    - cscope -R .

10) vimtutor
    Basic level tutor for vim

11) Disk Usage (du command)
    -h -> human readable format
    -a -> all files

    du -sh .
        gives the disk usage of the current directory

    du -sh *
        gives the disk usage of the files in the current directory

    Trick:
        To find the largrest file in the directory, use the following command
        du -sh * | sort -rh | head -10

12) ack-grep <pattern>
    - Lists all the occurences of the pattern in all the file

13) gsettings set org.gnome.desktop.default-applications.terminal exec 'xterm -fa 'Monospace' -fs 9 -maximized' - in Ubuntu12.04 and beyond
    - Used to change the default terminal in ubuntu

14) Ctrl+l -> Clears the console
15) Ctrl+u -> Clears the whole line in the shell
16) Ctrl+k -> Clears the the line from the current cursor position to the end
17) Ctrl+y -> recall the cleared data

18) sshfs <host@ipaddr:/remote_dir> <local empty_dir>
    To mount the host dir to the local empty dir.

    usermount -uz <local dir> (or) umount <local dir>
    To unmount

19) File Indexing using updatedb and locate
    sudo updatedb -> to update index file for locate
    (or)
    crontab -e
    -> add "0 5 * * * updatedb" to the file
    
    Now locate command works.
    eg: to locate a file exactly with the same name 
        locate -b '\NAME'

    To update locate, update mlocate package

20) Emptying the file without changing the permission of the file
    rm -rf exm.txt && touch exm.txt
    -> will remove the file and create a new file but the new file will not have the same permission as the old one

    cat /dev/null > exm.txt
    -> will empty the file exm.txt and the permissions remains the same.

21) Detect your Linux Distribution
    lsb_release -a  -> Prints distribution-specific information

22) Broadcast msg accross users in the systems
    echo "<Msg>" | wall

23) List of current Logged in Users
    w

24) Removing Old kernels in Debian Systems
    uname -r --> gets the Linux kernel version used now
    dpkg --list | grep linux-image  --> Lists all the kernel images in the systems
    sudo apt-get purge linux-image-<version> --> To remove the kernel version
    sudo update-grub2

25) pushd and popd commands
    pushd -> used to push the directory into the stack
    popd -> used to pop the directory into the stack
    dirs -> used to list of the the dirs in stack

    usage: 
        /usr/ports $ pushd /etc
        /etc $ 
        /etc $ popd
        /usr/ports $

26) To write the commands in vim:
    'Ctrl + x' and then press 'e'
    It opens the editor mentioned in $EDITOR env

27) Crontab Job to execute scripts in regular intervals of time:
    Linux Cron Utility is an effective way to schedule a routine backgrount job,

    Crontab format:
    MIN HOUR DATE MONTH DAY COMMAND

    crontab -l -> to list all the cron jobs
    crontab -u <username> -l -> to list other users cron jobs
    crontab -e -> to edit the crontab file to create a new job

    Eg1: To set a cron job that executes every weekday during work hours:
    00 09-18 * * 1-5 <path of the bash file>

    Eg2: To execute something every 10 mins:
    */10 * * * * <Path to the bash file>

    Note: Dont forget to add a new line after end of the Crontab file
    Hence make a note in the end of the file:
    crontab -e
    
    8 * * * * <some job>

    # Dont forget the newLine!

28) To keep track of all the Config Files in the system:
    Create a git repo and associate to a  Crontab job.

    Git part:
    --------
    git init
    git add <conf files>
    git commit -m "Initial Commit"
    git remote add origin <git server> (Optional if u wanna put it into the server)
    git push -u origin master (Optional)

    Create a Bash file which commits:
    ---------------------------------
    #!/bin/bash
    DDDD = `date +%Y_%m_%d`
    cd /<path>
    git commit -a -m "Auto commit $DDDD"
    git push (Optional)

    Make the bash file executable:
    -----------------------------
    chmod +x <name of the bash file>.sh

    Create a CronTab Job:
    ---------------------

    eg:
    crontab -e
    45 2 1 * * /<path to the bashfile>

29) Putting process to background:
    $ ./bash_script.sh &

    Runs the script in the back ground. But still prints in terminal,
    to privent printing, redirect the output to /dev/null:
    $ ./bash_script.sh > /dev/null &

    Or to print only the error msgs:
    $ ./bash_script.sh &> /dev/null &

30) The 2>&1 redirection
    Using 2>&1 at the end of command is useful way to supress the output and only display errors.

    1 -> stdout
    2 -> stderr

    & -> indicates that what follows is a file discriptor and not a filename. So the construct becomes.
    2>&1
    
31) Disable SSH password authentication

    First, allow log-in by certificate. 
    Copy the contents of your ~/.ssh/id_rsa.pub into the ~/.ssh/authorized_keys file on the server, 
    or run:
    ssh-copy-id [server IP]

    Then, open /etc/ssh/sshd_config and find:
    #PasswordAuthentication yes

    Change it to:
    PasswordAuthentication no

    Restart the SSH server daemon to apply the change:
    sudo service ssh restart

    Now it is only possible to SSH into the server using a key that matches a line in ~/.ssh/authorized_keys.

    Brute force attacks are no longer effective because even a correct password guess will be rejected.

