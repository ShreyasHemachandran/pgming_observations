=========================================================================================
=                               Notes on Shell Scripting				=
=========================================================================================

Commands:
=========

1) ls: 
	Options:
	--------
	ls -a
	ls -l

2) file:
	Options:
	file *

3) cp:
	cp <src path> <dest path>

4) mv:
	mv <src path> <dest path>

5) tail:
	tail +10 <file name>  --> To output the last 10 lines of the file

6) head:
	head +10 <file Name>   --> To output the first 10 lines of the file

7) ln:
	ln -s <ActualFile> <Symbolic File Name> ---> To Crete a symbolic link

8) vi / vim / gvim:
    General:
    --------
	- gg -> to make the cursor point on top of the file
	- =G -> to Alligh the lines till botom of the file
	- Shift + k on a lib fuction, takes you to the man page of the function
    - ^(Ctrl)x^o ->  Gives Sugessions on the path that you are typing - Read :help(:help ^x^o)
    - :ia <abbrivation> <the actual word> --> Used to abrivate any symbol. To unabbrivate use :iuna
    - in command mode, ^a on any number it incriments the number, ^x -> decriments
    - Inserting the output of the shell command into the file using !! (bang bang)
        :.!!<command> -> does the above
    - Calculate the mathematics and insert into the file in insert mode using: ^r =
    - Use gqap commad in normal mode to format the whole file with good indentation
    - u -> in normal Mode - undo the changes.
    - ^R -> Redo the Changes.

    Windows:
    --------
    - ^+w v / :vsplit -> Vertically splits the window
    - ^+w s / :split -> Horizontally splits the window
    - ^+w o / :only -> Displays only that window
    - ^+w c / :close -> Closes the window
    - ^+w h/j/k/l : Moving cursor between windows
    - ^+w H/J/K/L : Moving Window
    - ^+w +/- / :resize +/-<Number> : Resizing the Wondow Height
    - ^+w </> / :vertical resize +/<Number> : Resizing the window Width
    - ^+w = : Resize windows to equal height and width
    - :help ^w : reference to window

    Ack: <Note: Ack (Capital 'A')>
    ----
    - :Ack <pattern> -> lists all the occurences in multile files in the current and sub directories
    - :cn to go to the next occurence
    - :cp to go to the previous occurence
    - ccopen / cclose to open or close the menu
	
9)  find . -name "*vpu*.c"
	Finds the specific pattern file in the Current Directory (.)

10) ctags
	install "ctags"  and use to jump to variables and functions.
	- ctags -R . --> Execute ths command in the current directory,
			This produces a "tags" file
	- in vi editor --> :set <the path of the "tags" file>
	- ctrl + ]  --> to jump to the functions and variables
	- ctrl + t  --> to jump back to the previous position
    - :!ts – shows the list.
    - :!tn – goes to the next tag in that list.
    - :!tp – goes to the previous tag in that list.
    - :!tf – goes to the function which is in the first of the list.
    - :!tl – goes to the function which is in the last of the list.
    - :!ta <funtion Name> toggles to the funtion

11) cscope
	install "cscope" to do the same as ctags, its a differnt tool.
	- cscope -R .

12) vimtutor
	Basic level tutor for vim

13) du -sh .
    gives the disk usage of the current directory

14) git
    Diff tool:
    ----------
    - To set the Diff tool in git:
        git config --global diff.tool <your diff tool> (example: vimdiff / gvimdiff / meld)
        git config --global difftool.prompt false
    - To use Diff tool in git
        git difftool <name of the file> -> tells the difference in the cloud and the local
    - Similarly gitgutter tool can be used to make out the difference in runtime

15) ack-grep <pattern>
    - Lists all the occurences of the pattern in all the file

16) tmux
    Basic:
    ------
    - 

17) gconftool --type string --set /desktop/gnome/applications/terminal/exec <YOUR-TERMINAL>
    - Used to change the default terminal in ubuntu
    eg: gconftool --type string --set /desktop/gnome/applications/terminal/exec 'xterm -fa ******' - You know it

18) Ctrl+l -> Clears the console
19) Ctrl+u -> Clears the whole line in the shell
20) Ctrl+k -> Clears the the line from the current cursor position to the end
21) Ctrl+y -> recall the cleared data


Shell Scpring:
==============

1) Printing value of 3+3 --> echo `expr 3 + 3`
2) Printing "Hello - (value of) 3+3" --> echo "Hello - `expr 3 + 3`"
3) Exit Status of the previous executed program can be got using: "$?"
